"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupBoardStage = exports.defaultEnvironmentProperties = exports.defaultCanvasStyles = exports.defaultWindowStyles = void 0;
const hooks_1 = require("./hooks");
exports.defaultWindowStyles = {
    width: 1024,
    height: 640,
};
exports.defaultCanvasStyles = {
    width: 'fit-content',
    height: 'fit-content',
    marginLeft: 'auto',
    marginRight: 'auto',
    marginBottom: 'auto',
    marginTop: 'auto',
    paddingLeft: '0px',
    paddingRight: '0px',
    paddingBottom: '0px',
    paddingTop: '0px',
};
exports.defaultEnvironmentProperties = {
    windowWidth: exports.defaultWindowStyles.width,
    windowHeight: exports.defaultWindowStyles.height,
    canvasMargin: {},
    canvasPadding: {},
};
const applyStylesToWindow = (windowStyles = {}, previousProps) => {
    // we revert the changes to previous values when running cleanup
    previousProps.windowHeight = previousProps.windowHeight ? window.outerHeight : exports.defaultWindowStyles.height;
    previousProps.windowWidth = previousProps.windowWidth ? window.outerWidth : exports.defaultWindowStyles.width;
    window.resizeTo(windowStyles.windowWidth || previousProps.windowWidth, windowStyles.windowHeight || previousProps.windowHeight);
    document.body.style.backgroundColor = windowStyles.windowBackgroundColor || '';
};
const applyStylesToCanvas = (canvas, environmentProps = {}) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
    const canvasStyle = {
        width: environmentProps.canvasWidth ? `${environmentProps.canvasWidth}px` : exports.defaultCanvasStyles.width,
        height: environmentProps.canvasHeight ? `${environmentProps.canvasHeight}px` : exports.defaultCanvasStyles.height,
        marginLeft: ((_a = environmentProps.canvasMargin) === null || _a === void 0 ? void 0 : _a.left)
            ? `${(_b = environmentProps.canvasMargin) === null || _b === void 0 ? void 0 : _b.left}px`
            : exports.defaultCanvasStyles.marginLeft,
        marginRight: ((_c = environmentProps.canvasMargin) === null || _c === void 0 ? void 0 : _c.right)
            ? `${(_d = environmentProps.canvasMargin) === null || _d === void 0 ? void 0 : _d.right}px`
            : exports.defaultCanvasStyles.marginRight,
        marginBottom: ((_e = environmentProps.canvasMargin) === null || _e === void 0 ? void 0 : _e.bottom)
            ? `${(_f = environmentProps.canvasMargin) === null || _f === void 0 ? void 0 : _f.bottom}px`
            : exports.defaultCanvasStyles.marginBottom,
        marginTop: ((_g = environmentProps.canvasMargin) === null || _g === void 0 ? void 0 : _g.top)
            ? `${(_h = environmentProps.canvasMargin) === null || _h === void 0 ? void 0 : _h.top}px`
            : exports.defaultCanvasStyles.marginTop,
        paddingLeft: ((_j = environmentProps.canvasPadding) === null || _j === void 0 ? void 0 : _j.left)
            ? `${(_k = environmentProps.canvasPadding) === null || _k === void 0 ? void 0 : _k.left}px`
            : exports.defaultCanvasStyles.paddingLeft,
        paddingRight: ((_l = environmentProps.canvasPadding) === null || _l === void 0 ? void 0 : _l.right)
            ? `${(_m = environmentProps.canvasPadding) === null || _m === void 0 ? void 0 : _m.right}px`
            : exports.defaultCanvasStyles.paddingRight,
        paddingBottom: ((_o = environmentProps.canvasPadding) === null || _o === void 0 ? void 0 : _o.bottom)
            ? `${(_p = environmentProps.canvasPadding) === null || _p === void 0 ? void 0 : _p.bottom}px`
            : exports.defaultCanvasStyles.paddingBottom,
        paddingTop: ((_q = environmentProps.canvasPadding) === null || _q === void 0 ? void 0 : _q.top)
            ? `${(_r = environmentProps.canvasPadding) === null || _r === void 0 ? void 0 : _r.top}px`
            : exports.defaultCanvasStyles.paddingTop,
        backgroundColor: environmentProps.canvasBackgroundColor || '',
    };
    // Canvas gets stretched horizontally/vertically
    // when horizontal (left and right) or vertical (top and bottom) margins are applied.
    if (((_s = environmentProps.canvasMargin) === null || _s === void 0 ? void 0 : _s.left) !== undefined && environmentProps.canvasMargin.right !== undefined) {
        canvasStyle.width = '100%';
    }
    if (((_t = environmentProps.canvasMargin) === null || _t === void 0 ? void 0 : _t.top) !== undefined && environmentProps.canvasMargin.bottom !== undefined) {
        canvasStyle.height = 'auto';
    }
    Object.assign(canvas.style, canvasStyle);
};
const setupBoardStage = (board, parentElement) => {
    const previousWindowEnvironmentProps = {};
    const canvas = document.createElement('div');
    canvas.setAttribute('id', 'board-canvas');
    const { environmentProps } = board;
    applyStylesToWindow(environmentProps, previousWindowEnvironmentProps);
    applyStylesToCanvas(canvas, environmentProps);
    (0, hooks_1.callHooks)(board, 'beforeAppendCanvas', canvas);
    parentElement.appendChild(canvas);
    const updateCanvas = (canvasEnvironmentProps) => {
        applyStylesToCanvas(canvas, canvasEnvironmentProps);
    };
    const updateWindow = (windowEnvironmentProps) => {
        applyStylesToWindow(windowEnvironmentProps, previousWindowEnvironmentProps);
    };
    const cleanup = () => {
        (0, hooks_1.callHooks)(board, 'beforeStageCleanUp', canvas);
        canvas.remove();
        if (previousWindowEnvironmentProps.windowWidth && previousWindowEnvironmentProps.windowHeight) {
            window.resizeTo(previousWindowEnvironmentProps.windowWidth, previousWindowEnvironmentProps.windowHeight);
        }
    };
    return { canvas, updateCanvas, updateWindow, cleanup };
};
exports.setupBoardStage = setupBoardStage;
//# sourceMappingURL=setup-stage.js.map